openapi: 3.0.3

info:
  version: "1"
  title: "Express Boilerplate"
  description: "Demo Express Boilerplate"

paths:
  /users:
    post:
      summary: Sign Up User
      tags:
        - UserApi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignUp"
      responses:
        200:
          $ref: "#/components/responses/Response"

    get:
      summary: Get all users
      tags:
        - UserApi
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /users/{id}:
    delete:
      summary: Delete account
      tags:
        - UserApi
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                  msg: "Your account has been deleted."
                }

  /books:
    # Adds a new book #
    post:
      summary: Adds a new book
      tags:
        - BookApi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        200:
          $ref: "#/components/responses/Response"

    # Gets a books /notes?offset=100&limit=50 #
    get:
      summary: Gets a list of books
      tags:
        - BookApi
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          required: false
          description: The number of items to return.

  # Gets a book #
  /books/{bookId}:
    get:
      summary: Gets a book by ID
      tags:
        - BookApi
      operationId: getBook
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A Book object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
components:
  responses:
    Response:
      description: Common response
      content:
        application/json:
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                enum: [ok, error]
              code:
                type: number
                example:
                  - 200
              message:
                type: string
                enum:
                  - Success
                  - Request body has wrong format
    BookGetResponse:
      description: Gets a Book
      content:
        application/json:
          schema: '#/components/schemas/Book'

    # Links #
    links:
      GetBookByBookId:   # <---- arbitrary name for the link
        operationId: getBook
        parameters:
          bookId: '$response.body#/bookId'
        description: >
          The `id` value returned in the response can be used as
          the `bookId` parameter in `GET /books/{bookId}`.
  schemas:
    UserSignUp:
      description: UserSignUp
      type: object
      required:
        - email
        - password
        - confirmPassword
      properties:
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
      example:
        email: test@email.com
        password: userpassword
        confirmPassword: userpassword
    Book:
      description: Book schema
      type: object
      required:
        - id
        - title
        - date
        - description
        - createdAt
        - updatedAt
        - authorName
      properties:
        title:
          type: string
        date:
          type: string
          format: date-time
        author:
          type: string
        description:
          type: string
        image:
          type: string
      example:
        title: Some book
        date: '2020-02-10T17:32:28Z'
        author: Some author
        description: Some description
        image: images/some-image.jpg
    User:
      example: {
        tokens: [],
        _id: "5eb9a1968b8d5b36155290ac",
        email: "test@email.com",
        password: "$2a$10$kcq5VxeRO7ZS01FsUAqshOG.6b9czvW27beI6jSfsX7CHdYR4cL2m",
        createdAt: "2020-05-11T19:03:50.581Z",
        updatedAt: "2020-05-11T19:03:50.581Z",
        __v: 0
      }

    # ArrayOfBooks #
    Books:
      description: List of Books
      type: array
      items:
        $ref: '#/components/schemas/Book'

    Users:
      description: List of Users
      type: array
      items:
        $ref: '#/components/schemas/User'
